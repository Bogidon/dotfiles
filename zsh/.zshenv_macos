#!/bin/zsh

export SSH_KEY_PATH="$HOME/.ssh/id_rsa"
export ANDROID_HOME="$HOME/Library/Android/sdk"
export ANDROID_NDK_HOME="$HOME/Library/Android/android-ndk-r16b"
export GRADLE_USER_HOME="$HOME/.gradle"
export LDFLAGS="-L/usr/local/opt/openssl/lib -L/usr/local/opt/libxml2/lib"
export CPPFLAGS="-I/usr/local/opt/openssl/include -I/usr/local/opt/libxml2/include"
export PKG_CONFIG_PATH="/usr/local/opt/openssl/lib/pkgconfig"
export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/opt/openssl/lib/
export GOROOT="$HOME/.gvm/gos/go1.13.7"
export GOPATH="$HOME/.gvm/pkgsets/go1.13.7/global"
export JAVA_HOME="/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/jre"

# I used to force path to exactly what I specified here via an env var called 'BOG_PATH'
# that I would reset PATH to at the end of the shell init. This was in an effort to have
# full control over my paths, instead of allowing applications to install into my path
# through macOS's path_helper tool (https://scriptingosx.com/2017/05/where-paths-come-from/)
#
#
# For now stopping this practice, to give some control back to the OS. May re-enable in the future.
#
export PATH=$(echo "
$HOME/bin
:$HOME/bin-macos
:$PATH
:$HOME/.rbenv/shims
:$HOME/.rbenv/bin
:$HOME/.cargo/bin
:/usr/local/opt/openssl/bin
:/usr/local/bin
:/usr/local/sbin
:/usr/local/share/dotnet
:/usr/bin
:/bin
:/usr/sbin
:/sbin
:/usr/local/opt/mysql@5.6/bin
:$DOTFILES/scripts/macos
:$DOTFILES/zsh/oh-my-zsh-custom/plugins/git-open
:$HOME/.local/bin
:$HOME/.avn/bin
:$HOME/.yarn/bin
:$ANDROID_HOME/tools
:$HOME/.cargo/bin
:$ANDROID_HOME/platform-tools
:/Applications/VMware OVF Tool
:/opt/X11/bin
:$ANDROID_HOME/emulator
:$ANDROID_HOME/tools
:$ANDROID_HOME/tools/bin
:$ANDROID_HOME/platform-tools
:$JAVA_HOME/bin
" | tr -d '\n') # remove newlines
