dotfile_configure() {

	install_dependencies() {
		# Change default shell to zsh
		chsh -s /bin/zsh

		which -s brew
		if [[ $? != 0 ]] ; then
		    # Install Homebrew
		    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
		else
			# Update Homebrew
		    brew update
		fi

		# Install from Brewfile
		ln -s -f $HOME/.dotfiles/assets/.Brewfile $HOME 
		yes | brew bundle install --global

		# Configure macOS settings
		../macos/.macos
		
	} ; install_dependencies

	move_assets() {
		# TODO
	} ; move_assets

	echo "Configuration complete."
}

# shell envs
EDITOR=st

# plugins
plugins+=(osx xcode)

# aliases
alias emustart='$(which emulator) -avd $(emulator -avd -list-avds | head -n 1)'
alias jn='jupyter notebook'

# Vagrant command that allows easy manipulation of VMs regardless of current dir
# (and allows for commands to be applied to all VMs)
vag() {	
	if [ -z "$1" ] ; then
		# show documentation 
cat <<'EOL'
vag - shortcut for controlling Vagrant
--------------------------------------
vag COMMAND [SEARCHSTR|all]

COMMAND - vagrant command that accepts an id (e.g. halt, up, suspend)
SEARCHSTR - used to grep result of `vagrant global-status` to find IDs
all - apply to all VMs in `vagrant global-status`
EOL
	else
		if [ -z "$2" ] ; then
			# run `vagrant $COMMAND`
			vagrant $1
		elif [ "$2" = "all" ] ; then
			# run `vagrant $COMMAND` with each ID in global-status
			ids=("${(@f)$(vagrant global-status | grep running | cut -c1-8)}")
			for id in $ids; do
				cmd="vagrant $1 $id"
				echo "running... $cmd"
				eval $cmd
			done
		else
			# run `vagrant $COMMAND` with ID from provided name
			vagrant $1 $(vagrant global-status | grep $2 | cut -c1-8)
		fi
	fi
}

# Temporary Jupyter Notebook
jntmp() {
	TEMP=$(mktemp -d /tmp/jn_tmp.XXXXX)
	echo "New tmp directory: $TEMP"
	cp "$DOTFILES/templates/ipynb.ipynb" "$DOTFILES/templates/modsim.py" $TEMP
	jupyter notebook $TEMP/ipynb.ipynb
}

# New LaTex project
latexnew() {
	DIRECTORY=''

	while getopts 'ho:' flag; do
	  case "${flag}" in
	    o) DIRECTORY="${OPTARG}" ;;
	    h) echo "
				latexnew: creates base directory for optimal LaTeXing.

				-o: specify output directory. If not specified, creates directory in /tmp.
				-h: displays this help message.
			" ;;
	    *) error "Unexpected option ${flag}" ;;
	  esac
	done

	if [[ -z "$DIRECTORY" ]] ; then # if DIRECTORY is not set, create tmp
		DIRECTORY=$(mktemp -d /tmp/latextmp.XXXXXXXXXX)
	fi

	cp -R "$DOTFILES/templates/latex/" "$DIRECTORY"
	echo "Created base latex directory: $DIRECTORY"

	# Offer to open Sublime
	echo -n "Open in Sublime (y/n)? "
	old_stty_cfg=$(stty -g)
	stty raw -echo ; answer=$(head -c 1) ; stty $old_stty_cfg
	if echo "$answer" | grep -iq "^y" ;then
	    subl "$DIRECTORY";
	fi
}

# Sticky SSH: retry until nonzero exit code
# from: http://backreference.org/2013/04/26/ssh-auto-reconnect/
sssh(){
  # try to connect every 0.5 secs (modulo timeouts)
  while true; do command ssh "$@"; [ $? -eq 0 ] && break || sleep 0.5; done
}


# iTerm2
test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

# macOS path management (idk how this got here)
eval $(/usr/libexec/path_helper -s)

# Language Version Managers

## rbenv
# rbenv() {
# 	arg1=$1
# 	if [ "$arg1" = "init" ]; then
# 		eval "$(rbenv init -)"
# 		EXIT=$?
# 		if [ $EXIT = 0 ]; then
# 			unset -f rbenv
# 		else
# 			echo -e '\e[1;33mMessage from Bogdan: rbenv failed to initialize.'
# 		fi
# 	elif; then
# 		echo -e '\e[1;33mMessage from Bogdan: rbenv not initialized. Run "rbenv init".'
# 	fi
# }
eval "$(rbenv init -)"

## nvmrc loader
__nvmrc_loader() {
  local node_version="$(nvm version)"
  local nvmrc_path="$(nvm_find_nvmrc)"

  if [ -n "$nvmrc_path" ]; then
    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

    if [ "$nvmrc_node_version" = "N/A" ]; then
      nvm install
    elif [ "$nvmrc_node_version" != "$node_version" ]; then
      nvm use
    fi
  elif [ "$node_version" != "$(nvm version default)" ]; then
    echo "Reverting to nvm default version"
    nvm use default
  fi
}

## nvm forward
__nvm_forward() {
	nvm "$@"
}

## nvm
nvm() {
	echo -e '\e[1;33mMessage from Bogdan: initializing nvm...\e[0m'
	export NVM_DIR="/usr/local/nvm"
	[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # load nvm
	__nvmrc_loader # configure .nvmrc loader
	autoload -Uz add-zsh-hook
	add-zsh-hook chpwd __nvmrc_loader
	if ! [ $# -eq 0 ]; then # forward arguments to nvm, if supplied
		echo -e '\e[1;33mRerouting arguments to nvm...\e[0m'
		__nvm_forward "$@";
	fi
	echo -e '\e[1;32mDone!'
}